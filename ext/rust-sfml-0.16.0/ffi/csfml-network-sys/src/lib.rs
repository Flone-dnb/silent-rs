#![allow(non_snake_case, non_camel_case_types, non_upper_case_globals)]

extern crate csfml_system_sys;
use csfml_system_sys::*;

/* automatically generated by rust-bindgen */
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfIpAddress {
    pub address: [::std::os::raw::c_char; 16usize],
}
#[test]
fn bindgen_test_layout_sfIpAddress() {
    assert_eq!(
        ::std::mem::size_of::<sfIpAddress>(),
        16usize,
        concat!("Size of: ", stringify!(sfIpAddress))
    );
    assert_eq!(
        ::std::mem::align_of::<sfIpAddress>(),
        1usize,
        concat!("Alignment of ", stringify!(sfIpAddress))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<sfIpAddress>())).address as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(sfIpAddress),
            "::",
            stringify!(address)
        )
    );
}
extern "C" {
    pub static sfIpAddress_None: sfIpAddress;
}
extern "C" {
    pub static sfIpAddress_Any: sfIpAddress;
}
extern "C" {
    pub static sfIpAddress_LocalHost: sfIpAddress;
}
extern "C" {
    pub static sfIpAddress_Broadcast: sfIpAddress;
}
extern "C" {
    pub fn sfIpAddress_fromString(address: *const ::std::os::raw::c_char) -> sfIpAddress;
}
extern "C" {
    pub fn sfIpAddress_fromBytes(
        byte0: sfUint8,
        byte1: sfUint8,
        byte2: sfUint8,
        byte3: sfUint8,
    ) -> sfIpAddress;
}
extern "C" {
    pub fn sfIpAddress_fromInteger(address: sfUint32) -> sfIpAddress;
}
extern "C" {
    pub fn sfIpAddress_toString(address: sfIpAddress, string: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn sfIpAddress_toInteger(address: sfIpAddress) -> sfUint32;
}
extern "C" {
    pub fn sfIpAddress_getLocalAddress() -> sfIpAddress;
}
extern "C" {
    pub fn sfIpAddress_getPublicAddress(timeout: sfTime) -> sfIpAddress;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfFtpDirectoryResponse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfFtpListingResponse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfFtpResponse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfFtp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfHttpRequest {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfHttpResponse {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfHttp {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfPacket {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfSocketSelector {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfTcpListener {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfTcpSocket {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sfUdpSocket {
    _unused: [u8; 0],
}
pub type size_t = ::std::os::raw::c_ulong;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce1 as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<max_align_t>())).__clang_max_align_nonce2 as *const _ as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const sfFtpTransferMode_sfFtpBinary: sfFtpTransferMode = 0;
pub const sfFtpTransferMode_sfFtpAscii: sfFtpTransferMode = 1;
pub const sfFtpTransferMode_sfFtpEbcdic: sfFtpTransferMode = 2;
pub type sfFtpTransferMode = u32;
pub const sfFtpStatus_sfFtpRestartMarkerReply: sfFtpStatus = 110;
pub const sfFtpStatus_sfFtpServiceReadySoon: sfFtpStatus = 120;
pub const sfFtpStatus_sfFtpDataConnectionAlreadyOpened: sfFtpStatus = 125;
pub const sfFtpStatus_sfFtpOpeningDataConnection: sfFtpStatus = 150;
pub const sfFtpStatus_sfFtpOk: sfFtpStatus = 200;
pub const sfFtpStatus_sfFtpPointlessCommand: sfFtpStatus = 202;
pub const sfFtpStatus_sfFtpSystemStatus: sfFtpStatus = 211;
pub const sfFtpStatus_sfFtpDirectoryStatus: sfFtpStatus = 212;
pub const sfFtpStatus_sfFtpFileStatus: sfFtpStatus = 213;
pub const sfFtpStatus_sfFtpHelpMessage: sfFtpStatus = 214;
pub const sfFtpStatus_sfFtpSystemType: sfFtpStatus = 215;
pub const sfFtpStatus_sfFtpServiceReady: sfFtpStatus = 220;
pub const sfFtpStatus_sfFtpClosingConnection: sfFtpStatus = 221;
pub const sfFtpStatus_sfFtpDataConnectionOpened: sfFtpStatus = 225;
pub const sfFtpStatus_sfFtpClosingDataConnection: sfFtpStatus = 226;
pub const sfFtpStatus_sfFtpEnteringPassiveMode: sfFtpStatus = 227;
pub const sfFtpStatus_sfFtpLoggedIn: sfFtpStatus = 230;
pub const sfFtpStatus_sfFtpFileActionOk: sfFtpStatus = 250;
pub const sfFtpStatus_sfFtpDirectoryOk: sfFtpStatus = 257;
pub const sfFtpStatus_sfFtpNeedPassword: sfFtpStatus = 331;
pub const sfFtpStatus_sfFtpNeedAccountToLogIn: sfFtpStatus = 332;
pub const sfFtpStatus_sfFtpNeedInformation: sfFtpStatus = 350;
pub const sfFtpStatus_sfFtpServiceUnavailable: sfFtpStatus = 421;
pub const sfFtpStatus_sfFtpDataConnectionUnavailable: sfFtpStatus = 425;
pub const sfFtpStatus_sfFtpTransferAborted: sfFtpStatus = 426;
pub const sfFtpStatus_sfFtpFileActionAborted: sfFtpStatus = 450;
pub const sfFtpStatus_sfFtpLocalError: sfFtpStatus = 451;
pub const sfFtpStatus_sfFtpInsufficientStorageSpace: sfFtpStatus = 452;
pub const sfFtpStatus_sfFtpCommandUnknown: sfFtpStatus = 500;
pub const sfFtpStatus_sfFtpParametersUnknown: sfFtpStatus = 501;
pub const sfFtpStatus_sfFtpCommandNotImplemented: sfFtpStatus = 502;
pub const sfFtpStatus_sfFtpBadCommandSequence: sfFtpStatus = 503;
pub const sfFtpStatus_sfFtpParameterNotImplemented: sfFtpStatus = 504;
pub const sfFtpStatus_sfFtpNotLoggedIn: sfFtpStatus = 530;
pub const sfFtpStatus_sfFtpNeedAccountToStore: sfFtpStatus = 532;
pub const sfFtpStatus_sfFtpFileUnavailable: sfFtpStatus = 550;
pub const sfFtpStatus_sfFtpPageTypeUnknown: sfFtpStatus = 551;
pub const sfFtpStatus_sfFtpNotEnoughMemory: sfFtpStatus = 552;
pub const sfFtpStatus_sfFtpFilenameNotAllowed: sfFtpStatus = 553;
pub const sfFtpStatus_sfFtpInvalidResponse: sfFtpStatus = 1000;
pub const sfFtpStatus_sfFtpConnectionFailed: sfFtpStatus = 1001;
pub const sfFtpStatus_sfFtpConnectionClosed: sfFtpStatus = 1002;
pub const sfFtpStatus_sfFtpInvalidFile: sfFtpStatus = 1003;
pub type sfFtpStatus = u32;
extern "C" {
    pub fn sfFtpListingResponse_destroy(ftpListingResponse: *mut sfFtpListingResponse);
}
extern "C" {
    pub fn sfFtpListingResponse_isOk(ftpListingResponse: *const sfFtpListingResponse) -> sfBool;
}
extern "C" {
    pub fn sfFtpListingResponse_getStatus(
        ftpListingResponse: *const sfFtpListingResponse,
    ) -> sfFtpStatus;
}
extern "C" {
    pub fn sfFtpListingResponse_getMessage(
        ftpListingResponse: *const sfFtpListingResponse,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sfFtpListingResponse_getCount(ftpListingResponse: *const sfFtpListingResponse)
        -> size_t;
}
extern "C" {
    pub fn sfFtpListingResponse_getName(
        ftpListingResponse: *const sfFtpListingResponse,
        index: size_t,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sfFtpDirectoryResponse_destroy(ftpDirectoryResponse: *mut sfFtpDirectoryResponse);
}
extern "C" {
    pub fn sfFtpDirectoryResponse_isOk(
        ftpDirectoryResponse: *const sfFtpDirectoryResponse,
    ) -> sfBool;
}
extern "C" {
    pub fn sfFtpDirectoryResponse_getStatus(
        ftpDirectoryResponse: *const sfFtpDirectoryResponse,
    ) -> sfFtpStatus;
}
extern "C" {
    pub fn sfFtpDirectoryResponse_getMessage(
        ftpDirectoryResponse: *const sfFtpDirectoryResponse,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sfFtpDirectoryResponse_getDirectory(
        ftpDirectoryResponse: *const sfFtpDirectoryResponse,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sfFtpResponse_destroy(ftpResponse: *mut sfFtpResponse);
}
extern "C" {
    pub fn sfFtpResponse_isOk(ftpResponse: *const sfFtpResponse) -> sfBool;
}
extern "C" {
    pub fn sfFtpResponse_getStatus(ftpResponse: *const sfFtpResponse) -> sfFtpStatus;
}
extern "C" {
    pub fn sfFtpResponse_getMessage(
        ftpResponse: *const sfFtpResponse,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sfFtp_create() -> *mut sfFtp;
}
extern "C" {
    pub fn sfFtp_destroy(ftp: *mut sfFtp);
}
extern "C" {
    pub fn sfFtp_connect(
        ftp: *mut sfFtp,
        server: sfIpAddress,
        port: ::std::os::raw::c_ushort,
        timeout: sfTime,
    ) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_loginAnonymous(ftp: *mut sfFtp) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_login(
        ftp: *mut sfFtp,
        name: *const ::std::os::raw::c_char,
        password: *const ::std::os::raw::c_char,
    ) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_disconnect(ftp: *mut sfFtp) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_keepAlive(ftp: *mut sfFtp) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_getWorkingDirectory(ftp: *mut sfFtp) -> *mut sfFtpDirectoryResponse;
}
extern "C" {
    pub fn sfFtp_getDirectoryListing(
        ftp: *mut sfFtp,
        directory: *const ::std::os::raw::c_char,
    ) -> *mut sfFtpListingResponse;
}
extern "C" {
    pub fn sfFtp_changeDirectory(
        ftp: *mut sfFtp,
        directory: *const ::std::os::raw::c_char,
    ) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_parentDirectory(ftp: *mut sfFtp) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_createDirectory(
        ftp: *mut sfFtp,
        name: *const ::std::os::raw::c_char,
    ) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_deleteDirectory(
        ftp: *mut sfFtp,
        name: *const ::std::os::raw::c_char,
    ) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_renameFile(
        ftp: *mut sfFtp,
        file: *const ::std::os::raw::c_char,
        newName: *const ::std::os::raw::c_char,
    ) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_deleteFile(
        ftp: *mut sfFtp,
        name: *const ::std::os::raw::c_char,
    ) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_download(
        ftp: *mut sfFtp,
        remoteFile: *const ::std::os::raw::c_char,
        localPath: *const ::std::os::raw::c_char,
        mode: sfFtpTransferMode,
    ) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_upload(
        ftp: *mut sfFtp,
        localFile: *const ::std::os::raw::c_char,
        remotePath: *const ::std::os::raw::c_char,
        mode: sfFtpTransferMode,
        append: sfBool,
    ) -> *mut sfFtpResponse;
}
extern "C" {
    pub fn sfFtp_sendCommand(
        ftp: *mut sfFtp,
        command: *const ::std::os::raw::c_char,
        parameter: *const ::std::os::raw::c_char,
    ) -> *mut sfFtpResponse;
}
pub const sfHttpMethod_sfHttpGet: sfHttpMethod = 0;
pub const sfHttpMethod_sfHttpPost: sfHttpMethod = 1;
pub const sfHttpMethod_sfHttpHead: sfHttpMethod = 2;
pub const sfHttpMethod_sfHttpPut: sfHttpMethod = 3;
pub const sfHttpMethod_sfHttpDelete: sfHttpMethod = 4;
pub type sfHttpMethod = u32;
pub const sfHttpStatus_sfHttpOk: sfHttpStatus = 200;
pub const sfHttpStatus_sfHttpCreated: sfHttpStatus = 201;
pub const sfHttpStatus_sfHttpAccepted: sfHttpStatus = 202;
pub const sfHttpStatus_sfHttpNoContent: sfHttpStatus = 204;
pub const sfHttpStatus_sfHttpResetContent: sfHttpStatus = 205;
pub const sfHttpStatus_sfHttpPartialContent: sfHttpStatus = 206;
pub const sfHttpStatus_sfHttpMultipleChoices: sfHttpStatus = 300;
pub const sfHttpStatus_sfHttpMovedPermanently: sfHttpStatus = 301;
pub const sfHttpStatus_sfHttpMovedTemporarily: sfHttpStatus = 302;
pub const sfHttpStatus_sfHttpNotModified: sfHttpStatus = 304;
pub const sfHttpStatus_sfHttpBadRequest: sfHttpStatus = 400;
pub const sfHttpStatus_sfHttpUnauthorized: sfHttpStatus = 401;
pub const sfHttpStatus_sfHttpForbidden: sfHttpStatus = 403;
pub const sfHttpStatus_sfHttpNotFound: sfHttpStatus = 404;
pub const sfHttpStatus_sfHttpRangeNotSatisfiable: sfHttpStatus = 407;
pub const sfHttpStatus_sfHttpInternalServerError: sfHttpStatus = 500;
pub const sfHttpStatus_sfHttpNotImplemented: sfHttpStatus = 501;
pub const sfHttpStatus_sfHttpBadGateway: sfHttpStatus = 502;
pub const sfHttpStatus_sfHttpServiceNotAvailable: sfHttpStatus = 503;
pub const sfHttpStatus_sfHttpGatewayTimeout: sfHttpStatus = 504;
pub const sfHttpStatus_sfHttpVersionNotSupported: sfHttpStatus = 505;
pub const sfHttpStatus_sfHttpInvalidResponse: sfHttpStatus = 1000;
pub const sfHttpStatus_sfHttpConnectionFailed: sfHttpStatus = 1001;
pub type sfHttpStatus = u32;
extern "C" {
    pub fn sfHttpRequest_create() -> *mut sfHttpRequest;
}
extern "C" {
    pub fn sfHttpRequest_destroy(httpRequest: *mut sfHttpRequest);
}
extern "C" {
    pub fn sfHttpRequest_setField(
        httpRequest: *mut sfHttpRequest,
        field: *const ::std::os::raw::c_char,
        value: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sfHttpRequest_setMethod(httpRequest: *mut sfHttpRequest, method: sfHttpMethod);
}
extern "C" {
    pub fn sfHttpRequest_setUri(
        httpRequest: *mut sfHttpRequest,
        uri: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sfHttpRequest_setHttpVersion(
        httpRequest: *mut sfHttpRequest,
        major: ::std::os::raw::c_uint,
        minor: ::std::os::raw::c_uint,
    );
}
extern "C" {
    pub fn sfHttpRequest_setBody(
        httpRequest: *mut sfHttpRequest,
        body: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn sfHttpResponse_destroy(httpResponse: *mut sfHttpResponse);
}
extern "C" {
    pub fn sfHttpResponse_getField(
        httpResponse: *const sfHttpResponse,
        field: *const ::std::os::raw::c_char,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sfHttpResponse_getStatus(httpResponse: *const sfHttpResponse) -> sfHttpStatus;
}
extern "C" {
    pub fn sfHttpResponse_getMajorVersion(
        httpResponse: *const sfHttpResponse,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfHttpResponse_getMinorVersion(
        httpResponse: *const sfHttpResponse,
    ) -> ::std::os::raw::c_uint;
}
extern "C" {
    pub fn sfHttpResponse_getBody(
        httpResponse: *const sfHttpResponse,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn sfHttp_create() -> *mut sfHttp;
}
extern "C" {
    pub fn sfHttp_destroy(http: *mut sfHttp);
}
extern "C" {
    pub fn sfHttp_setHost(
        http: *mut sfHttp,
        host: *const ::std::os::raw::c_char,
        port: ::std::os::raw::c_ushort,
    );
}
extern "C" {
    pub fn sfHttp_sendRequest(
        http: *mut sfHttp,
        request: *const sfHttpRequest,
        timeout: sfTime,
    ) -> *mut sfHttpResponse;
}
extern "C" {
    pub fn sfPacket_create() -> *mut sfPacket;
}
extern "C" {
    pub fn sfPacket_copy(packet: *const sfPacket) -> *mut sfPacket;
}
extern "C" {
    pub fn sfPacket_destroy(packet: *mut sfPacket);
}
extern "C" {
    pub fn sfPacket_append(
        packet: *mut sfPacket,
        data: *const ::std::os::raw::c_void,
        sizeInBytes: size_t,
    );
}
extern "C" {
    pub fn sfPacket_clear(packet: *mut sfPacket);
}
extern "C" {
    pub fn sfPacket_getData(packet: *const sfPacket) -> *const ::std::os::raw::c_void;
}
extern "C" {
    pub fn sfPacket_getDataSize(packet: *const sfPacket) -> size_t;
}
extern "C" {
    pub fn sfPacket_endOfPacket(packet: *const sfPacket) -> sfBool;
}
extern "C" {
    pub fn sfPacket_canRead(packet: *const sfPacket) -> sfBool;
}
extern "C" {
    pub fn sfPacket_readBool(packet: *mut sfPacket) -> sfBool;
}
extern "C" {
    pub fn sfPacket_readInt8(packet: *mut sfPacket) -> sfInt8;
}
extern "C" {
    pub fn sfPacket_readUint8(packet: *mut sfPacket) -> sfUint8;
}
extern "C" {
    pub fn sfPacket_readInt16(packet: *mut sfPacket) -> sfInt16;
}
extern "C" {
    pub fn sfPacket_readUint16(packet: *mut sfPacket) -> sfUint16;
}
extern "C" {
    pub fn sfPacket_readInt32(packet: *mut sfPacket) -> sfInt32;
}
extern "C" {
    pub fn sfPacket_readUint32(packet: *mut sfPacket) -> sfUint32;
}
extern "C" {
    pub fn sfPacket_readFloat(packet: *mut sfPacket) -> f32;
}
extern "C" {
    pub fn sfPacket_readDouble(packet: *mut sfPacket) -> f64;
}
extern "C" {
    pub fn sfPacket_readString(packet: *mut sfPacket, string: *mut ::std::os::raw::c_char);
}
extern "C" {
    pub fn sfPacket_readWideString(packet: *mut sfPacket, string: *mut wchar_t);
}
extern "C" {
    pub fn sfPacket_writeBool(packet: *mut sfPacket, arg1: sfBool);
}
extern "C" {
    pub fn sfPacket_writeInt8(packet: *mut sfPacket, arg1: sfInt8);
}
extern "C" {
    pub fn sfPacket_writeUint8(packet: *mut sfPacket, arg1: sfUint8);
}
extern "C" {
    pub fn sfPacket_writeInt16(packet: *mut sfPacket, arg1: sfInt16);
}
extern "C" {
    pub fn sfPacket_writeUint16(packet: *mut sfPacket, arg1: sfUint16);
}
extern "C" {
    pub fn sfPacket_writeInt32(packet: *mut sfPacket, arg1: sfInt32);
}
extern "C" {
    pub fn sfPacket_writeUint32(packet: *mut sfPacket, arg1: sfUint32);
}
extern "C" {
    pub fn sfPacket_writeFloat(packet: *mut sfPacket, arg1: f32);
}
extern "C" {
    pub fn sfPacket_writeDouble(packet: *mut sfPacket, arg1: f64);
}
extern "C" {
    pub fn sfPacket_writeString(packet: *mut sfPacket, string: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn sfPacket_writeWideString(packet: *mut sfPacket, string: *const wchar_t);
}
extern "C" {
    pub fn sfSocketSelector_create() -> *mut sfSocketSelector;
}
extern "C" {
    pub fn sfSocketSelector_copy(selector: *const sfSocketSelector) -> *mut sfSocketSelector;
}
extern "C" {
    pub fn sfSocketSelector_destroy(selector: *mut sfSocketSelector);
}
extern "C" {
    pub fn sfSocketSelector_addTcpListener(
        selector: *mut sfSocketSelector,
        socket: *mut sfTcpListener,
    );
}
extern "C" {
    pub fn sfSocketSelector_addTcpSocket(selector: *mut sfSocketSelector, socket: *mut sfTcpSocket);
}
extern "C" {
    pub fn sfSocketSelector_addUdpSocket(selector: *mut sfSocketSelector, socket: *mut sfUdpSocket);
}
extern "C" {
    pub fn sfSocketSelector_removeTcpListener(
        selector: *mut sfSocketSelector,
        socket: *mut sfTcpListener,
    );
}
extern "C" {
    pub fn sfSocketSelector_removeTcpSocket(
        selector: *mut sfSocketSelector,
        socket: *mut sfTcpSocket,
    );
}
extern "C" {
    pub fn sfSocketSelector_removeUdpSocket(
        selector: *mut sfSocketSelector,
        socket: *mut sfUdpSocket,
    );
}
extern "C" {
    pub fn sfSocketSelector_clear(selector: *mut sfSocketSelector);
}
extern "C" {
    pub fn sfSocketSelector_wait(selector: *mut sfSocketSelector, timeout: sfTime) -> sfBool;
}
extern "C" {
    pub fn sfSocketSelector_isTcpListenerReady(
        selector: *const sfSocketSelector,
        socket: *mut sfTcpListener,
    ) -> sfBool;
}
extern "C" {
    pub fn sfSocketSelector_isTcpSocketReady(
        selector: *const sfSocketSelector,
        socket: *mut sfTcpSocket,
    ) -> sfBool;
}
extern "C" {
    pub fn sfSocketSelector_isUdpSocketReady(
        selector: *const sfSocketSelector,
        socket: *mut sfUdpSocket,
    ) -> sfBool;
}
pub const sfSocketStatus_sfSocketDone: sfSocketStatus = 0;
pub const sfSocketStatus_sfSocketNotReady: sfSocketStatus = 1;
pub const sfSocketStatus_sfSocketPartial: sfSocketStatus = 2;
pub const sfSocketStatus_sfSocketDisconnected: sfSocketStatus = 3;
pub const sfSocketStatus_sfSocketError: sfSocketStatus = 4;
pub type sfSocketStatus = u32;
extern "C" {
    pub fn sfTcpListener_create() -> *mut sfTcpListener;
}
extern "C" {
    pub fn sfTcpListener_destroy(listener: *mut sfTcpListener);
}
extern "C" {
    pub fn sfTcpListener_setBlocking(listener: *mut sfTcpListener, blocking: sfBool);
}
extern "C" {
    pub fn sfTcpListener_isBlocking(listener: *const sfTcpListener) -> sfBool;
}
extern "C" {
    pub fn sfTcpListener_getLocalPort(listener: *const sfTcpListener) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn sfTcpListener_listen(
        listener: *mut sfTcpListener,
        port: ::std::os::raw::c_ushort,
        address: sfIpAddress,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfTcpListener_accept(
        listener: *mut sfTcpListener,
        connected: *mut *mut sfTcpSocket,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfTcpSocket_create() -> *mut sfTcpSocket;
}
extern "C" {
    pub fn sfTcpSocket_destroy(socket: *mut sfTcpSocket);
}
extern "C" {
    pub fn sfTcpSocket_setBlocking(socket: *mut sfTcpSocket, blocking: sfBool);
}
extern "C" {
    pub fn sfTcpSocket_isBlocking(socket: *const sfTcpSocket) -> sfBool;
}
extern "C" {
    pub fn sfTcpSocket_getLocalPort(socket: *const sfTcpSocket) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn sfTcpSocket_getRemoteAddress(socket: *const sfTcpSocket) -> sfIpAddress;
}
extern "C" {
    pub fn sfTcpSocket_getRemotePort(socket: *const sfTcpSocket) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn sfTcpSocket_connect(
        socket: *mut sfTcpSocket,
        remoteAddress: sfIpAddress,
        remotePort: ::std::os::raw::c_ushort,
        timeout: sfTime,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfTcpSocket_disconnect(socket: *mut sfTcpSocket);
}
extern "C" {
    pub fn sfTcpSocket_send(
        socket: *mut sfTcpSocket,
        data: *const ::std::os::raw::c_void,
        size: size_t,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfTcpSocket_sendPartial(
        socket: *mut sfTcpSocket,
        data: *const ::std::os::raw::c_void,
        size: size_t,
        sent: *mut size_t,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfTcpSocket_receive(
        socket: *mut sfTcpSocket,
        data: *mut ::std::os::raw::c_void,
        size: size_t,
        received: *mut size_t,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfTcpSocket_sendPacket(
        socket: *mut sfTcpSocket,
        packet: *mut sfPacket,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfTcpSocket_receivePacket(
        socket: *mut sfTcpSocket,
        packet: *mut sfPacket,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfUdpSocket_create() -> *mut sfUdpSocket;
}
extern "C" {
    pub fn sfUdpSocket_destroy(socket: *mut sfUdpSocket);
}
extern "C" {
    pub fn sfUdpSocket_setBlocking(socket: *mut sfUdpSocket, blocking: sfBool);
}
extern "C" {
    pub fn sfUdpSocket_isBlocking(socket: *const sfUdpSocket) -> sfBool;
}
extern "C" {
    pub fn sfUdpSocket_getLocalPort(socket: *const sfUdpSocket) -> ::std::os::raw::c_ushort;
}
extern "C" {
    pub fn sfUdpSocket_bind(
        socket: *mut sfUdpSocket,
        port: ::std::os::raw::c_ushort,
        address: sfIpAddress,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfUdpSocket_unbind(socket: *mut sfUdpSocket);
}
extern "C" {
    pub fn sfUdpSocket_send(
        socket: *mut sfUdpSocket,
        data: *const ::std::os::raw::c_void,
        size: size_t,
        remoteAddress: sfIpAddress,
        remotePort: ::std::os::raw::c_ushort,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfUdpSocket_receive(
        socket: *mut sfUdpSocket,
        data: *mut ::std::os::raw::c_void,
        size: size_t,
        received: *mut size_t,
        remoteAddress: *mut sfIpAddress,
        remotePort: *mut ::std::os::raw::c_ushort,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfUdpSocket_sendPacket(
        socket: *mut sfUdpSocket,
        packet: *mut sfPacket,
        remoteAddress: sfIpAddress,
        remotePort: ::std::os::raw::c_ushort,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfUdpSocket_receivePacket(
        socket: *mut sfUdpSocket,
        packet: *mut sfPacket,
        remoteAddress: *mut sfIpAddress,
        remotePort: *mut ::std::os::raw::c_ushort,
    ) -> sfSocketStatus;
}
extern "C" {
    pub fn sfUdpSocket_maxDatagramSize() -> ::std::os::raw::c_uint;
}
